from ._anvil_designer import DriverStatsTemplate
from anvil import *
import anvil.server
import json
from collections import defaultdict, Counter
import anvil.js
from datetime import datetime

class DriverStats(DriverStatsTemplate):
  def __init__(self, **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    response = anvil.server.call('getDrivers')
    text = response.get_bytes().decode('utf-8')
    drivers = json.loads(text)
    response = anvil.server.call('getTrips')
    text = response.get_bytes().decode('utf-8')
    trips = json.loads(text)
    self.trips = trips
    driversNew = []
    for x in drivers:
      if x != "Joshua/Brian" or x != "NA" or x != "Patrick/Vincent" or x != "N/A":
        driversNew.append(x)
    driverCount = len(driversNew)
    # Step 1: Count the number of trips for each driver
    trip_count = defaultdict(int)
    grouped_data = defaultdict(list)
    for trip in trips:
      trip_count[trip['name']] += 1
      date_str = trip['date']
      if date_str:
        date = datetime.strptime(date_str[:10], '%Y-%m-%d')
        grouped_data[date].append(trip)

    grouped_data = dict(sorted(grouped_data.items()))

# Print or plot the grouped data
    dates = list(grouped_data.keys())
    counts = [len(group) for group in grouped_data.values()]

# Step 2: Calculate the total amount generated by each driver
    amount_generated = defaultdict(float)
    for trip in trips:
      amount_generated[trip['name']] += float(trip['amount'].strip('$').replace(',', ''))
# Step 3: Calculate the average amount per trip
    average_amount_per_trip = defaultdict(float)
    for driver, total_amount in amount_generated.items():
      average_amount_per_trip[driver] = total_amount / trip_count[driver] if trip_count[driver] != 0 else 0

# Step 4: Rank the drivers based on the number of trips, amount generated, and average amount per trip
    ranked_drivers_trips = [{'name': driver, 'trips': trips} for driver, trips in sorted(trip_count.items(), key=lambda x: x[1], reverse=True)]
    ranked_drivers_amount = [{'name': driver, 'amount': f"${amount:,.2f}"} for driver, amount in sorted(amount_generated.items(), key=lambda x: x[1], reverse=True)]
    ranked_drivers_average = [{'name': driver, 'average_amount': f"${avg_amount:.2f}"} for driver, avg_amount in sorted(average_amount_per_trip.items(), key=lambda x: x[1], reverse=True)]
    self.repeating_panel_1.items = ranked_drivers_trips
    self.repeating_panel_2.items = ranked_drivers_amount
    filtered_data = [record for record in self.trips if '-' in record['location']]
    #self.extract_top_origins_destinations(filtered_data)
    self.extract_driver_top_origins_destinations(filtered_data)

    # Any code you write here will run before the form opens.

  # Function to extract top origins and destinations
  def extract_top_origins_destinations(self, data, **event_args):
    locations = [entry["location"] for entry in data]
    location_counts = Counter(locations)
    top_locations = location_counts.most_common(5)  # Change 5 to desired number of top locations

    top_origins = [loc.split("-")[0] for loc, _ in top_locations]
    top_destinations = [loc.split("-")[1] for loc, _ in top_locations]
    print(top_origins)
    print(top_destinations)

    return top_origins, top_destinations

# Function to extract each driver's top origins and destinations
  def extract_driver_top_origins_destinations(self, data, **event_args):
    driver_locations = {}
    for entry in data:
        driver = entry["name"]
        location = entry["location"]
        if driver not in driver_locations:
            driver_locations[driver] = []
        driver_locations[driver].append(location)

    driver_top_origins = []
    driver_top_destinations = []

    for driver, locations in driver_locations.items():
      location_counts = Counter(locations)
      top_locations = location_counts.most_common(5)  # Change 3 to desired number of top locations per driver
      top_origins = {
        'driver': driver,
        'origins': [loc.split("-")[0] for loc, _ in top_locations]
        }
      top_destinations = {
        'driver': driver,
        'destinations': [loc.split("-")[1] for loc, _ in top_locations]
        }
      driver_top_origins.append(top_origins)
      driver_top_destinations.append(top_destinations)
    self.repeating_panel_3.items = driver_top_destinations
    self.repeating_panel_4.items = driver_top_origins
